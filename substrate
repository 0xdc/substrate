#!/bin/bash

set -eo pipefail

if which lsns 2>/dev/null >&2; then
	if test -z "$(lsns | awk "/$$/&&/mnt/")"; then
		echo re-executing in our own mount namespace
		exec unshare -m $0 $@
	fi
fi

date=${1:-$(date --date=yesterday +%Y%m%d)}
arch=${ARCH:-$(uname -m)}

BASE_DIR="$(dirname $(readlink -f $0))"
REPO_DIR=$BASE_DIR/weekly

source "${BASE_DIR}/arch/$arch"
targets="${TARGETS:-${targets[*]}}"

# use squashfs snapshots
if ! test -f ${BASE_DIR}/snapshots/gentoo-$date.lzo.sqfs; then
	rsync --no-motd --progress mirror.bytemark.co.uk::gentoo/snapshots/squashfs/{gentoo-$date.lzo.sqfs,sha512sum.txt} ${BASE_DIR}/snapshots/
	pushd ${BASE_DIR}/snapshots
		grep ${date}.lzo sha512sum.txt | sha512sum -c
	popd
fi

BUILDS_DIR=$BASE_DIR/builds/$upstream
tempstage=$(mktemp)
cataconf=$(mktemp)
envscript=$(mktemp)

cat $BASE_DIR/.config > $cataconf
tee $envscript <<<"export MAKEOPTS=\"-j$(nproc)\""
tee -a $cataconf <<<"envscript=\"${envscript}\""
tee -a $cataconf <<<"storedir=\"$BASE_DIR\""

catalyst="${BASE_DIR}/catalyst/bin/catalyst.git --log-level info -c $cataconf"

for combo in $targets; do
	target=$(cut -d: -f1 <<<$combo)
	rel=${subarch:--$target}
	stage=$( cut -d: -f2 <<<$combo)

	compression_mode=$(awk '/^compression_mode:/{print$2}' $REPO_DIR/specs/$upstream/$target/$stage.spec)
	ext=$($BASE_DIR/compress_ext.py $compression_mode)

	# Skip a build if it already exists
	test -f $BUILDS_DIR/$target/$date/$stage-$upstream$rel-$date$ext && continue

	# If a Makefile exists for the target, run the default target
	test -f $BUILDS_DIR/$target/Makefile && make -C $BUILDS_DIR/$target


	sed "s:@REPO_DIR@:$REPO_DIR:;s/@latest@/$date/g" \
		$REPO_DIR/specs/$upstream/$target/$stage.spec | \
		tee $tempstage

	# Enable single shared package cache
	tee -a $tempstage <<<"pkgcache_path: ${BASE_DIR}/packages/${upstream}"
	tee -a $tempstage <<<"kerncache_path: ${BASE_DIR}/kerncache/${upstream}"
	# add subarch and target
	tee -a $tempstage <<<"subarch: $upstream$subarch"
	if grep -q "target:" $tempstage; then
		# specfile already has target:
		# so we want to add something to the version_stamp
		grep -q version_stamp: $tempstage || {
			rel="-$stage"
			tee -a $tempstage <<<"version_stamp: $stage-$date"
		}
		stage=$(awk '/^target:/{print$2}' $tempstage)
		# redo the build check since the stage is now different
		test -f $BUILDS_DIR/$target/$date/$stage-$upstream$rel-$date$ext && continue
	else
		tee -a $tempstage <<<"target: $stage"
		grep -q version_stamp: $tempstage || tee -a $tempstage <<<"version_stamp: $target-$date"
		if test "$stage" = "livecd-stage3"; then
			iso=$(awk '/^livecd\/iso:/{print$2}' $tempstage)
			test -f $BUILDS_DIR/$target/$date/$iso && continue
		fi
	fi
	# append rel_type and snapshot
	tee -a $tempstage <<<"rel_type: $upstream/$target/$date"
	tee -a $tempstage <<<"snapshot_treeish: $date.lzo"
	(test -n "$cflags" && ! grep -q common_flags: $tempstage) && tee -a $tempstage <<<"common_flags: $cflags"

	extraargs=()
	test "$stage" = "livecd-stage1" && extraargs+=( -C livecd/unmerge= )

	test -d "$BASE_DIR/logs/$target" || mkdir -p "$BASE_DIR/logs/$target"
	$catalyst -f $tempstage ${extraargs[*]} |& tee $BASE_DIR/logs/$target/$stage-$upstream$rel-$date.log

	rm -f $BUILDS_DIR/$target/$stage-$upstream$rel-latest*
	echo -n "$BUILDS_DIR/$target/"
	if test "$stage" = "livecd-stage3"; then
		# XXX: do we need a symlink to these isos? probably not
		tee $BUILDS_DIR/$target/latest-$stage-$upstream$rel.txt <<<"$date/$iso"
	else
		(cd $BUILDS_DIR/$target && ln -s $date/$stage-$upstream$rel-$date$ext $BUILDS_DIR/$target/$stage-$upstream$rel-latest$ext)
		tee $BUILDS_DIR/$target/latest-$stage-$upstream$rel.txt <<<"$date/$stage-$upstream$rel-$date$ext"
	fi
done
